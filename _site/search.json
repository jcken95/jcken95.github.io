[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "I‚Äôm Jack, a statistician, data scientist and educator based in the north east. Nice to meet you.\nI‚Äôm currently a senior data scientist at UKHSA. I completed all my studies at Newcastle University. I hold a PhD in Statistics (2023) and also obtained a First class MMathStat (2018).\nFrom a professional perspective, I love telling stories with data, learning about how to write production-ready software, anything remotely statsy and finding a data-driven solution to challenging problems. I‚Äôm donated a lot of my time to the Royal Statistical Society; serving and chairing the Young Statisticians Section and I‚Äôm also treasurer or the North Eastern local group.\nWhen I‚Äôm not doing massive nerd stuff I‚Äôm probably doing some type II fun. I fill my free time with cycling, running and walking the dog. The dog is called Robin and I don‚Äôt know what breed he is."
  },
  {
    "objectID": "projects/creepr.html",
    "href": "projects/creepr.html",
    "title": "creepr",
    "section": "",
    "text": "I really like {beepr}. For the uninitiated, the usage is simply\n\nbeepr::beep()\n\nand the result of this code snippet is a beep. Literally a solitary beep. Quite useful when you have a medium length bit of code and want some kind of indication when it has finished. There are a handful of additional noises that can be accessed by placing a number in the function call.\nThese noises are all fine. But that‚Äôs it, they‚Äôre just fine. They‚Äôre not shocking, jarring, chilling or creepy. Where‚Äôs the fun in that?\nTurns out, if you do a bit of digging, the {beepr} package provides you with the functionality to play any .wav file that‚Äôs on your machine. This can be done with\n\nbeepr:::play_file(\"/path/to/noise.wav\")\n\nThat got me thinking. If I could collated some creepy .wav files I could probably make a creepy version of {beepr} before Halloween. Probably became a reality and in fact, going from this stupid idea to a working package only took a couple of hours (and I‚Äôd forgotten how to make a package)."
  },
  {
    "objectID": "projects/creepr.html#the-prequel-beepr",
    "href": "projects/creepr.html#the-prequel-beepr",
    "title": "creepr",
    "section": "",
    "text": "I really like {beepr}. For the uninitiated, the usage is simply\n\nbeepr::beep()\n\nand the result of this code snippet is a beep. Literally a solitary beep. Quite useful when you have a medium length bit of code and want some kind of indication when it has finished. There are a handful of additional noises that can be accessed by placing a number in the function call.\nThese noises are all fine. But that‚Äôs it, they‚Äôre just fine. They‚Äôre not shocking, jarring, chilling or creepy. Where‚Äôs the fun in that?\nTurns out, if you do a bit of digging, the {beepr} package provides you with the functionality to play any .wav file that‚Äôs on your machine. This can be done with\n\nbeepr:::play_file(\"/path/to/noise.wav\")\n\nThat got me thinking. If I could collated some creepy .wav files I could probably make a creepy version of {beepr} before Halloween. Probably became a reality and in fact, going from this stupid idea to a working package only took a couple of hours (and I‚Äôd forgotten how to make a package)."
  },
  {
    "objectID": "projects/creepr.html#get-creeping",
    "href": "projects/creepr.html#get-creeping",
    "title": "creepr",
    "section": "Get creeping",
    "text": "Get creeping\nI‚Äôve put the package on github, thus you can install and run {creepr} in the following way\n\ndevtools::install_github(\"https://github.com/jcken95/creepr\")\ncreepr::creepr()\n\nThis will play a sound from my collated sounds at random. I‚Äôve (to date) included a whopping 8 creepy sounds: ‚Äúcreature‚Äù, ‚Äúeerie‚Äù, ‚Äúintense‚Äù, ‚Äúlaugh‚Äù, ‚Äúpiano‚Äù, ‚Äúpiano2‚Äù, ‚Äúringing‚Äù and ‚Äústrings‚Äù.\nA feature of this package is that, even if you close R whilst the sound is playing, the sound will not terminate with R. If you play a sound, then you‚Äôre committed to it. It‚Äôs like tops 15 seconds.\nHappy creeping!"
  },
  {
    "objectID": "projects/code_review.html",
    "href": "projects/code_review.html",
    "title": "Code review for statisticians, data scientists & modellers",
    "section": "",
    "text": "I work as a data scientist alongside people who typically have academic backgrounds in statistics, public health, or the mathematical and statistical aspects of biology or ecology. Some of us have job titles relating to data science, other to mathematical and statistical modelling. None of us are software developers trade.\nHowever, we‚Äôre writing software all day. We‚Äôre writing mathematical/statistical models, creating data-driven products and doing data engineering. We quality assure all of this work via code review.\nThe honest answer to Who is this for? is that this is for me. It‚Äôs for a previous version of myself who knew the mechanics of reviewing code, but could have exercised a bit more much more nuance.\nThat being said, I think anyone working in some kind of modelling or analytical role, whose main output is some sort of mathematical or statistical analysis, but implements their processes via code could find this useful.\nIt doesn‚Äôt really matter what programming language you use, or whether you‚Äôre storing your code on GitHub, GitLab, Bitbucket or whatever else. However this will be biased towards R and GitHub because that‚Äôs what I use. The concepts are important here, not the precise toolkit.\nIf you‚Äôre here, I‚Äôm going to assume you know roughly what a code review is, but it doesn‚Äôt hurt to have a quick refresher.\nCode review is a form of peer review. Let‚Äôs suppose you‚Äôve written some code, made a pull request and then assigned a reviewer. The reviewer goes through your changes and looks for potential issues with the code, suggests improvements, and maybe says one or two nice things about the thing you‚Äôve been grinding away at.\nI‚Äôd also like to be upfront here and say there is very little original thought going into this. Software developers have written a lot of good content on what makes good code review. I‚Äôll link to some further reading and inspiration and the end. The aim here is to\n\nBring good review practice to those in analytical roles.\nCommunicate this good practice in a way which works for those in analytical roles."
  },
  {
    "objectID": "projects/code_review.html#literal-code-review",
    "href": "projects/code_review.html#literal-code-review",
    "title": "Code review for statisticians, data scientists & modellers",
    "section": "Literal code review",
    "text": "Literal code review\nHere you‚Äôre going to look at the code, maybe run or interact with it, then make comments about the code via the pull request mechanisms. I tend to start by having a skim over the code to look for general structure, then spend some time running and interacting with the code later to really get into the guts of it.\n\nAnnotating code\nTo make a comment, click the + symbol to comment on a single line of code. Click a + and drag down to comment on multiple lines.\n\n\n\nMaking a comment on a line of code.\n\n\n\nYou can write a general comment or question in the text box.\nClick the little +/- symbol (it looks a bit like a page üìÑ) to make a direction suggestion on the code. This is useful when it‚Äôs simply easier to make the fix, than telling someone how to make the fix.\nClicking the symbol again will let you make a new suggestion on the same line(s) of code. Handy when you think there are multiple ways forward.\n\n\n\n\nMaking a direct suggestion to code.\n\n\n\nClick Add single comment if the review is informal or you‚Äôre just being nosey. Start review is better formal reviews.\n\n\n\nSubmitting review\nOnce you‚Äôve finished reviewing, click Review changes in the top right of the browser winder. Take some time to write encouraging feedback in the comment box.\nThen click one of\n\nComment: just general feedback or you‚Äôre being nosey.\nApprove: this PR is worthy of main.\nRequest changes: this needs a little work.\n\nas appropriate and then Submit Review.\n\nComments on code start a ‚Äúconversation‚Äù which can be resolved. It is up to the reviewer to resolve conversations. I‚Äôd encourage authors to use emoji reactions or comments to track their work.\nYou can view changes incurred by a particular commit. Clicking the commit ID on the commit history (main page of the PR) will show you these changes. This is really useful in the ping-pong stage of the review to isolate changes, rather looking through the full diff."
  },
  {
    "objectID": "projects/code_review.html#further-reading",
    "href": "projects/code_review.html#further-reading",
    "title": "Code review for statisticians, data scientists & modellers",
    "section": "Further reading",
    "text": "Further reading\n\nGoogle‚Äôs engineering practices\nGitLab blog: What is a code review?\nStack Overflow blog: How to Make Good Code Review Better\nTidyteam code review principles"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Here are my various contributions to society.\n\n\n\n\n\n\n\n\n\n\ncreepr\n\n\nIt‚Äôs just beepr but creepy\n\n\n\n\n\nNov 9, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nCode review for statisticians, data scientists & modellers\n\n\nSoftware developers have some really good approaches to code review. Here‚Äôs a data scientists plea to listen to the software developers!\n\n\n\n\n\nSep 11, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]